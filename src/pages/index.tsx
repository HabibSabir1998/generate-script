import Head from 'next/head'
import styles from '../styles/Home.module.scss'
import { Box, Chip, IconButton, Slider } from '@mui/material'
import Navbar from '../components/Navbar'
import TextField from '@mui/material/TextField'
import Autocomplete from '@mui/material/Autocomplete'
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'
import ChevronRightIcon from '@mui/icons-material/ChevronRight'

import { useState } from 'react'
import {
  autocompleteInput,
  autocompleteStyle,
  backButton,
  footerBackButton,
  footerNextButton,
  nextButton,
  nextButtonArrowRight,
  sliderBox,
  sliderLabel,
  sliderStyle,
} from '../styles'

const contentType = [
  'Fun',
  'Education',
  'Sports',
  'News',
  'Investment',
  'Facts',
]
const options: Record<string, string[]> = {
  Fun: [
    'Board games revival',
    'Comedy trends',
    'Amusement parks',
    'Escape rooms',
    'Street performances',
    'Online challenges',
    'Festivals impact',
    'Crafting movement',
    'Social gaming',
    'Virtual reality',
  ],
  Education: [
    'Gamified learning',
    'Education systems',
    'Bilingual benefits',
    'Standardized testing',
    'Arts in schools',
    'Tech bootcamps',
    'Homeschooling dynamics',
    'Mentorship importance',
    'Educational equity',
    'Mobile learning',
  ],
  Sports: [
    'Sports medicine',
    'Team sociology',
    'Olympic economics',
    'Gender parity',
    'Fandom psychology',
    'Extreme sports',
    'Sports business',
    'Youth athletics',
    'Data analytics',
    'Doping ethics',
  ],
  News: [
    'Citizen journalism',
    'Whistleblower influence',
    'Fake news',
    'Print media survival',
    'Social media news',
    'Cybersecurity news',
    'Democratic media',
    'News deserts',
    'News economics',
    'Broadcast evolution',
  ],
  Investment: [
    'Robo-advising',
    'Geopolitical impacts',
    'Index funds',
    'Real estate trends',
    'Startup investing',
    'Social trading',
    'Tax strategies',
    'Emerging markets',
    'Financial literacy',
    'Pension futures',
  ],
  Facts: [
    'Animal oddities',
    'Everyday science',
    'Historical obscurities',
    'Science myths',
    'Human body facts',
    'Oceanic discoveries',
    'Space exploration',
    'Ancient tech',
    'World laws',
    'Bizarre news',
  ],
}

export default function HomePage() {
  const [selectedContent, setSelectedContent] = useState('Fun')
  const [value, setValue] = useState<string | null>('Select')
  const [inputValue, setInputValue] = useState('')

  return (
    <div className={styles.container}>
      <Head>
        <title>Generate Script</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className={styles.main}>
        <h1 className={styles.title}>Content Type</h1>
        <p className={styles.subtitle}>
          Choose a content type that best fits your needs.
        </p>
        <h1 className={styles.question}>
          What type of content are you creating?
        </h1>
        <div>
          {contentType.map((value, index) => (
            <Chip
              label={value}
              color={selectedContent === value ? 'primary' : 'default'}
              variant={selectedContent === value ? 'filled' : 'outlined'}
              onClick={() => {
                setSelectedContent(value)
                setValue('Select')
              }}
              sx={{
                p: 1,
                mx: 1,
                mb: 1,
                color: '#fff',
                borderColor: selectedContent !== value ? '#fff' : 'none',
              }}
              key={index}
            />
          ))}
        </div>
        <h1 className={styles.question}>
          Which type of “{selectedContent}” content do you want to create?
        </h1>
        <div>
          <Autocomplete
            value={value}
            onChange={(_, newValue: string | null) => {
              setValue(newValue)
            }}
            popupIcon={<KeyboardArrowDownIcon sx={{ color: '#fff' }} />}
            inputValue={inputValue}
            onInputChange={(_, newInputValue) => {
              setInputValue(newInputValue)
            }}
            id="controllable-states"
            options={options[selectedContent]}
            sx={autocompleteStyle}
            renderInput={(params) => (
              <TextField
                {...params}
                size="small"
                placeholder="Select"
                sx={autocompleteInput}
              />
            )}
          />
        </div>
        <h1 className={styles.question}>
          Set the number of words for output text.
        </h1>
        <Box sx={sliderBox}>
          <span style={sliderLabel}>100</span>
          <Slider
            size="small"
            valueLabelDisplay="on"
            min={100}
            max={1000}
            sx={sliderStyle}
          />
          <span style={sliderLabel}>1000</span>
        </Box>
      </main>
      <Box
        sx={{
          alignItems: 'center',
          flexDirection: 'column',
          display: { xs: 'flex', sm: 'none' },
        }}
      >
        <IconButton
          size="medium"
          edge="end"
          aria-label="account of current user"
          aria-haspopup="true"
          color="inherit"
          sx={backButton}
        >
          <span className={styles.backButton}>Back</span>
        </IconButton>
        <IconButton
          size="medium"
          edge="end"
          aria-label="account of current user"
          aria-haspopup="true"
          color="inherit"
          sx={nextButton}
        >
          <span className={styles.nextButton}>Next</span>
        </IconButton>
      </Box>
      <Box
        sx={{
          display: { xs: 'none', sm: 'flex' },
        }}
      >
        <footer className={styles.footer}>
          <IconButton
            size="medium"
            edge="end"
            aria-label="account of current user"
            aria-haspopup="true"
            color="inherit"
            sx={footerBackButton}
          >
            <span className={styles.backButton}>Back</span>
          </IconButton>
          <IconButton
            size="medium"
            edge="end"
            aria-label="account of current user"
            aria-haspopup="true"
            color="inherit"
            sx={footerNextButton}
          >
            <span className={styles.nextButton}>Next</span>
            <ChevronRightIcon fontSize="small" sx={nextButtonArrowRight} />
            <ChevronRightIcon fontSize="medium" sx={nextButtonArrowRight} />
          </IconButton>
        </footer>
      </Box>
    </div>
  )
}
